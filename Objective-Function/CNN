# CNN iterate thru every feature
# lam = 0.01
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error
import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Dense, Input, Layer, Dropout, BatchNormalization, Conv1D, GlobalAveragePooling1D
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau

# Set random seed
np.random.seed(42)
tf.random.set_seed(42)

file_path = './alldata_downtownTodowntown.csv'
data = pd.read_csv(file_path)
data = data.dropna()

X = data.drop(columns=['total_number_trips', 'Unnamed: 0'])
y = data['total_number_trips'] / 101

# Monotonic Features
monotonic_features = ['downtown_downtown', 'EmpDen_Des', 'EmpDen_Ori', 'Commuters_HW', 'Commuters_WH']
monotonic_indices = [X.columns.get_loc(col) for col in monotonic_features]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

target_scaler = StandardScaler()
y_train_scaled = target_scaler.fit_transform(y_train.values.reshape(-1, 1)).flatten()
y_test_scaled = target_scaler.transform(y_test.values.reshape(-1, 1)).flatten()

# Reshape input data for CNN
X_train_reshaped = X_train_scaled.reshape((X_train_scaled.shape[0], X_train_scaled.shape[1], 1))
X_test_reshaped = X_test_scaled.reshape((X_test_scaled.shape[0], X_test_scaled.shape[1], 1))

class MonotonicityLayer(Layer):
    def __init__(self, lam, monotonic_indices, **kwargs):
        super(MonotonicityLayer, self).__init__(**kwargs)
        self.lam = lam
        self.monotonic_indices = monotonic_indices

    def build(self, input_shape):
        self.w = self.add_weight(shape=(len(self.monotonic_indices),),
                                 initializer='ones',
                                 trainable=True,
                                 constraint=tf.keras.constraints.NonNeg(),
                                 name='monotonicity_weights')
        super(MonotonicityLayer, self).build(input_shape)

    def call(self, inputs, training=None):
        features, predictions = inputs
        if self.lam == 0:
            return predictions
        monotonic_features = tf.gather(features, self.monotonic_indices, axis=1)
        monotonic_effects = self.lam * tf.reduce_sum(self.w * monotonic_features, axis=1, keepdims=True)
        if training:
            noise = tf.keras.backend.random_normal(shape=tf.shape(monotonic_effects), mean=0.0, stddev=0.1)
            monotonic_effects += noise
        adjusted_predictions = predictions + monotonic_effects
        return adjusted_predictions

def custom_loss(lam, monotonic_indices):
    def loss(y_true, y_pred):
        mse = tf.keras.losses.mean_squared_error(y_true, y_pred)
        if lam > 0:
            monotonicity_penalty = tf.reduce_mean(tf.maximum(0.0, -tf.gather(y_pred, monotonic_indices, axis=1)))
            return (1 - lam) * mse + lam * monotonicity_penalty
        return mse
    return loss

def create_cnn_model(input_shape, monotonic_indices, lam, learning_rate):
    inputs = Input(shape=input_shape)
    x = Conv1D(64, kernel_size=3, activation='relu', padding='same')(inputs)
    x = BatchNormalization()(x)
    x = Conv1D(32, kernel_size=3, activation='relu', padding='same')(x)
    x = BatchNormalization()(x)
    x = Conv1D(16, kernel_size=3, activation='relu', padding='same')(x)
    x = BatchNormalization()(x)
    x = GlobalAveragePooling1D()(x)
    x = Dense(64, activation='relu')(x)
    x = BatchNormalization()(x)
    x = Dropout(0.3)(x)
    predictions = Dense(1)(x)
    
    if lam > 0:
        outputs = MonotonicityLayer(lam, monotonic_indices)([tf.squeeze(inputs, axis=-1), predictions])
    else:
        outputs = predictions

    model = Model(inputs=inputs, outputs=outputs)
    model.compile(optimizer=Adam(learning_rate=learning_rate), loss=custom_loss(lam, monotonic_indices))
    return model

def count_violations(X, y, model, monotonic_indices):
    predictions = model.predict(X)
    violations = 0
    for idx in monotonic_indices:
        sorted_indices = np.argsort(X[:, idx, 0])
        sorted_predictions = predictions[sorted_indices]
        violations += np.sum(np.diff(sorted_predictions) < 0)
    return violations

def train_and_evaluate(monotonic_indices, lam, batch_size, learning_rate):
    model = create_cnn_model((X_train_reshaped.shape[1], 1), monotonic_indices, lam, learning_rate)

    early_stopping = EarlyStopping(monitor='val_loss', patience=50, restore_best_weights=True)
    reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=20, min_lr=0.0001)

    history = model.fit(X_train_reshaped, y_train_scaled, validation_data=(X_test_reshaped, y_test_scaled),
                        epochs=300, batch_size=batch_size, callbacks=[early_stopping, reduce_lr], verbose=0)

    predictions_scaled = model.predict(X_test_reshaped)
    predictions = target_scaler.inverse_transform(predictions_scaled)

    mse = mean_squared_error(y_test, predictions)
    violations = count_violations(X_test_reshaped, y_test, model, monotonic_indices)

    return mse, history, model, predictions, violations

# Train the base model for all multi and single-feature models (Î» = 0)
base_mse, base_history, base_model, base_predictions, base_violations = train_and_evaluate(monotonic_indices, 0, batch_size=32, learning_rate=0.001)

# lambda hyperparameters 
lam_values = [0, 0.01, 0.2, 0.4, 0.6, 0.8]
multi_feature_results = []
single_feature_results = {feature: [] for feature in monotonic_features}

for lam in lam_values:
    if lam == 0:
        multi_mse = base_mse
        multi_violations = base_violations
        single_mse = {feature: base_mse for feature in monotonic_features}
        single_violations = {feature: base_violations for feature in monotonic_features}
    else:
        multi_mse, _, _, _, multi_violations = train_and_evaluate(monotonic_indices, lam, batch_size=32, learning_rate=0.001)
        single_mse = {}
        single_violations = {}
        for feature in monotonic_features:
            feature_index = [X.columns.get_loc(feature)]
            single_mse[feature], _, _, _, single_violations[feature] = train_and_evaluate(feature_index, lam, batch_size=32, learning_rate=0.001)
    
    multi_feature_results.append({'lam': lam, 'mse': multi_mse, 'violations': multi_violations})
    for feature in monotonic_features:
        single_feature_results[feature].append({'lam': lam, 'mse': single_mse[feature], 'violations': single_violations[feature]})
    
    print(f"Lambda: {lam}")
    print(f"Multi-Feature MSE: {multi_mse}, Violations: {multi_violations}")
    for feature in monotonic_features:
        print(f"Single-Feature MSE ({feature}): {single_mse[feature]}, Violations: {single_violations[feature]}")
    print()

print("Multi-Feature Results:")
print(pd.DataFrame(multi_feature_results))

for feature in monotonic_features:
    print(f"\nSingle-Feature Results ({feature}):")
    print(pd.DataFrame(single_feature_results[feature]))
